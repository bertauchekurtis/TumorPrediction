xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#1d1b9e", "#9e1b1b"))
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#117833", "#9e1b1b"))
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
p <- plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#117833", "#d422bf"))
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
runApp('C:/Users/kurti/Desktop/PhosphoPep')
load('data/sample/phospho_only_results.RData')
load("data/sample/phospho_only_results.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
row.names(phospho_only_results) <- c("1", "2", "3")
row.names(phospho_only_results) <- c("Simple Linear Regression", "Stepwise Regresion", "Ridge Regression", "Lasso Regression", "Elastic Net Regression", "Random Forest", "XG Boost", "Support Vector Regression")
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
load("data/sample/slr_sample_result.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/slr_sample_result.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/stepwise_sample_result.RData")
sampleResults <- rbind(slr_sample_result, stepwise_sample_result)
View(phospho_only_results)
phospho_only_results <- load("data/sample/phospho_only_results.RData")
phospho_only_results <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
phosphoData <- read.csv(file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
slr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Linear Regression (1).csv")
step <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Best Subset Regression.csv")
lasso <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Lasso Regression.csv")
ridge <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Ridge Regression.csv")
elastic <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Elastic Net Regression.csv")
rf <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Random Forest.csv")
xgb <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/XG Boost (1).csv")
svr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Support Vector Regression.csv")
calcStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# RMSE
rmse <- sqrt(mean(residuals ^ 2))
# mae
mae <- mean(abs(residuals))
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
# correlation
corr <- cor(predictedResponse, trueResponse)
# return vector
c(rmse, mae, window, corr)
}
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
step_r <- calcStats(phosphoData$RetentionTime, step$Prediction)
lasso_r <- calcStats(phosphoData$RetentionTime, lasso$Prediction)
ridge_r <- calcStats(phosphoData$RetentionTime, ridge$Prediction)
elastic_r <- calcStats(phosphoData$RetentionTime, elastic$Prediction)
rf_r <- calcStats(phosphoData$RetentionTime, rf$prediction)
xgb_r <- calcStats(phosphoData$RetentionTime, xgb$Prediction)
svr_r <- calcStats(phosphoData$RetentionTime, svr$Prediction)
all_data <- data.frame(rmse = numeric(), mae = numeric(), window = numeric(), cor = numeric())
all_data[1,] <- slr_r
all_data[2,] <- step_r
all_data[3,] <- ridge_r
all_data[4,] <- lasso_r
all_data[5,] <- elastic_r
all_data[6,] <- rf_r
all_data[7,] <- xgb_r
all_data[8,] <- svr_r
phospho_only_results <- all_data
View(phospho_only_results)
colnames(phospho_only_results) <- c("Root Mean Square Error (minutes)", "Mean Absolute Error (minutes)", "95% Error Window Size (minutes)", "Correlation (minutes)")
row.names(phospho_only_results) <- c("Simple Linear Regression", "Stepwise Regresion", "Ridge Regression", "Lasso Regression", "Elastic Net Regression", "Random Forest", "XG Boost", "Support Vector Regression")
save(phospho_only_results, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
phospho_only_results <- load("data/sample/phospho_only_results.RData")
phospho_only_results <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
phospho_only_results <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
phosphoData <- read.csv(file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
slr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Linear Regression (1).csv")
step <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Best Subset Regression.csv")
lasso <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Lasso Regression.csv")
ridge <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Ridge Regression.csv")
elastic <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Elastic Net Regression.csv")
rf <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Random Forest.csv")
xgb <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/XG Boost (1).csv")
svr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Support Vector Regression.csv")
calcStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# RMSE
rmse <- sqrt(mean(residuals ^ 2))
# mae
mae <- mean(abs(residuals))
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
# correlation
corr <- cor(predictedResponse, trueResponse)
# return vector
c(rmse, mae, window, corr)
}
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
step_r <- calcStats(phosphoData$RetentionTime, step$Prediction)
lasso_r <- calcStats(phosphoData$RetentionTime, lasso$Prediction)
ridge_r <- calcStats(phosphoData$RetentionTime, ridge$Prediction)
elastic_r <- calcStats(phosphoData$RetentionTime, elastic$Prediction)
rf_r <- calcStats(phosphoData$RetentionTime, rf$prediction)
xgb_r <- calcStats(phosphoData$RetentionTime, xgb$Prediction)
svr_r <- calcStats(phosphoData$RetentionTime, svr$Prediction)
save(slr_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/slr_r_p.RData")
save(step_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/step_r_p.RData")
save(lasso_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/lasso_r_p.RData")
save(ridge_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/ridge_r_p.RData")
save(elastic_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/elastic_r_p.RData")
save(rf_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/rf_r_p.RData")
save(xgb_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/xgb_r_p.RData")
save(svr_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/svr_r_p.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/slr_r_p.RData")
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
xgb_results <- read.csv("data/sample/XG Boost Results.csv")
xgb_results <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/sample/XG Boost Results.csv")
rbPal <- colorRampPalette(c("#117833", "#d422bf"))
xgb_results$res <- sampleData$RetentionTime - xgb_results$Prediction
sampleData <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/testingSet_withVars_DATA_ONE.csv")
xgb_results$res <- sampleData$RetentionTime - xgb_results$Prediction
xgb_results$mod_res <- (abs(xgb_results$res)) ^ (1/3)
xgb_results$col <- rbPal(200)[as.numeric(cut(xgb_results$mod_res,breaks = 200))]
plot(x = sampleData$RetentionTime, y = xgb_results$Prediction, col = xgb_results$col)
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?renderPlot
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
View(xgb_results)
View(xgb_results)
View(xgb_results)
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?plot
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?barplot
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?abline
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?lines
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
?bsToolTip
?bsTooltip
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
sampleData <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/testingSet_withVars_DATA_ONE.csv")
slr <- read.csv("C:/Users/kurti/Downloads/full/Linear Regression.csv")
slr <- read.csv("C:/Users/kurti/Downloads/full/Linear Regression.csv")
step <- read.csv("C:/Users/kurti/Downloads/full/Best Subset Regression.csv")
ridge <- read.csv("C:/Users/kurti/Downloads/full/Ridge Regression.csv")
lasso <- read.csv("C:/Users/kurti/Downloads/full/Lasso Regression.csv")
elastic <- read.csv("C:/Users/kurti/Downloads/full/Elastic Net Regression.csv")
rf <- read.csv("C:/Users/kurti/Downloads/full/Random Forest.csv")
xgb <- read.csv("C:/Users/kurti/Downloads/full/XG Boost (1).csv")
svr <- read.csv("C:/Users/kurti/Downloads/full/Support Vector Regression.csv")
calcWinStats = function(trueResponse, predictedResponse)
{
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
c(window, q[1], q[2], mean(residuals))
}
calcWinStats = function(trueResponse, predictedResponse)
{
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
c(window, q[1], q[2], mean(residuals))
}
slr_w <- calcStats(phosphoData$RetentionTime, slr$Prediction)
slr_w <- calcWinStats(phosphoData$RetentionTime, slr$Prediction)
calcWinStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
c(window, q[1], q[2], mean(residuals))
}
slr_w <- calcWinStats(phosphoData$RetentionTime, slr$Prediction)
slr_w <- calcWinStats(sampleData$RetentionTime, slr$Prediction)
step_w <- calcWinStats(sampleData$RetentionTime, step$Prediction)
lasso_w <- calcWinStats(sampleData$RetentionTime, lasso$Prediction)
ridge_w <- calcWinStats(sampleData$RetentionTime, ridge$Prediction)
elastic_w <- calcWinStats(sampleData$RetentionTime, elastic$Prediction)
rf_w <- calcWinStats(sampleData$RetentionTime, rf$prediction)
rf_w <- calcWinStats(sampleData$RetentionTime, rf$prediction)
xgb_w <- calcWinStats(sampleData$RetentionTime, xgb$Prediction)
svr_w <- calcWinStats(sampleData$RetentionTime, svr$Prediction)
rf_w <- calcWinStats(sampleData$RetentionTime, rf$Prediction)
save(slr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
save(step_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/step_w.RData")
save(lasso_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/lasso_w.RData")
save(ridge_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/ridge_w.RData")
save(slr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
save(step_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/step_w.RData")
save(lasso_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/lasso_w.RData")
save(ridge_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/ridge_w.RData")
save(elastic_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/elastic_w.RData")
save(rf_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/rf_w.RData")
save(xgb_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/xgb_w.RData")
save(svr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/svr_w.RData")
install.packages("plotrix")
?runif
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
slr_w <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
slr_w <- calcWinStats(sampleData$RetentionTime, slr$Prediction)
save(slr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
runApp('C:/Users/kurti/Desktop/PhosphoPep')
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/step_w.RData")
windowResults <- rbind(slr_w, step_w)
windowResults <- rbind(windowResults, ridge_w)
windowResults <- rbind(windowResults, lasso_w)
windowResults <- rbind(windowResults, elastic_w)
windowResults <- rbind(windowResults, rf_w)
windowResults <- rbind(windowResults, xgb_w)
windowResults <- rbind(windowResults, svr_w)
View(windowResults)
colnames(windowResults) <- c("size", "low", "high", "mean")
windowResults$size
windowResults[,1]
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?plotCI
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?abline
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/XG Boost Results.csv")
load("C:/Users/kurti/Desktop/PhosphoPep - Copy/data/sample/XG Boost Results.csv")
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
deltaFleet <- read.csv(file = "C:/Users/kurti/Desktop/delta.csv")
deltaFleet$X <- NULL
deltaFleet$total <- deltaFleet$Delta.One + deltaFleet$First.Class + deltaFleet$Premimum.Select + deltaFleet$Delta.Comfort. + deltaFleet$Main.Cabin
deltaFleet$PremiumCabins <- deltaFleet$Delta.One + deltaFleet$First.Class
deltaFleet$EconomyCabins <- deltaFleet$total - deltaFleet$PremiumCabins
smaller <- deltaFleet[,c(10,11)]
smaller$total <- smaller$PremiumCabins + smaller$EconomyCabins
smaller$PremiumCabins <- smaller$PremiumCabins / smaller$total
smaller$EconomyCabins <- smaller$EconomyCabins / smaller$total
smaller$total <- NULL
smaller <- t(smaller)
barplot(height = as.matrix(smaller),
xlab = "Plane",
names.arg = round(smaller[1,], 2),
col = c("Blue","green"))
# libraries
library(e1071)
library(caret)
set.seed(37)
# load data
train_data <- read.csv("data/clean/training.csv")
test_data <- read.csv("data/clean/testing.csv")
train_control <- trainControl(method = "cv", number = 5)
# LINEAR SVM
linear_svm <- train(as.factor(Outcome) ~.,
data = train_data,
method = "svmLinear",
trControl = train_control,
tuneGrid = expand.grid(C = seq(0.01, 2, length = 20)))
setwd("C:/Users/kurti/Desktop/TumorPrediction")
# libraries
library(e1071)
library(caret)
set.seed(37)
# load data
train_data <- read.csv("data/clean/training.csv")
test_data <- read.csv("data/clean/testing.csv")
train_control <- trainControl(method = "cv", number = 5)
# LINEAR SVM
linear_svm <- train(as.factor(Outcome) ~.,
data = train_data,
method = "svmLinear",
trControl = train_control,
tuneGrid = expand.grid(C = seq(0.01, 2, length = 20)))
warnings()
best_linear_svm <- svm(as.factor(Outcome) ~ .,
data = train_data,
kernel = "linear",
cost = linear_svm$bestTune)
linear_svm_predictions <- predict(best_linear_svm,
test_data)
linear_svm_predictions
linear_svm_confusion_matrix <- confusionMatrix(data = factor(linear_svm_predictions),
reference = facotr(test_data$Outcome))
linear_svm_confusion_matrix <- confusionMatrix(data = factor(linear_svm_predictions),
reference = factor(test_data$Outcome))
linear_svm_confusion_matrix
save(best_linear_svm, file = "best_linear_svm_model.RData")
save(best_linear_svm, file = "models/best_linear_svm_model.RData")
save(linear_svm_confusion_matrix, file = "results/linear_svm_confusion_matrix.RData")
# RADIAL KERNEL
raidal_svm <- train(as.factor(Outcome) ~.,
data = train_data,
method = "svmRadial",
trControl = train_control,
tuneLength = 20)
warnings()
best_radial_svm <- svm(as.factor(Outcome) ~ .,
data = train_data,
kernel = "radial",
cost = raidal_svm$bestTune[2],
gamma = raidal_svm$bestTune[1])
radial_svm_predictions <- predict(best_radial_svm,
test_data)
radial_svm_confusion_matrix <- confusionMatrix(data = factor(radial_svm_predictions),
reference = factor(test_data$Outcome))
radial_svm_confusion_matrix
save(best_radial_svm, file = "models/best_radial_svm_model.RData")
save(radial_svm_confusion_matrix, file = "results/radial_svm_confusion_matrix.RData")
?xgboost
library(xgboost)
?xgboost
library(xgboost)
set.seed(37)
# load data
train_data <- read.csv("data/clean/training.csv")
test_data <- read.csv("data/clean/testing.csv")
train_labels <- train_data$Outcome
train_data$Outcome <- NULL
xgb_train_data <- xgb.DMatrix(data.matrix(train_data), label = train_labels)
test_labels <- test_data$Outcome
test_data$Outcome <- NULL
xgb_test_data <- xgb.DMatrix(data.matrix(test_data), label = test_labels)
# a matrix to hold hyperparameter combinations
matrixToTry <- matrix(,nrow=0,ncol=6)
for (gamma in c(0, 0.1, 0.2, 0.3, 0.4))
{
for (child_weight in c(1,2,3,4,5,6))
{
for (col_subsample in c(0.6, 0.7, 0.8, 0.9))
{
for (max_depth in c(6, 7, 8, 9, 10, 11))
{
for (subsample in c(0.6, 0.7, 0.8, 0.9))
{
for (eta in c(0.01, 0.05, 0.08, 0.1))
{
matrixToTry <- rbind(matrixToTry,
c(gamma,child_weight,
max_depth, subsample, col_subsample,
eta))
}
}
}
}
}
}
nrow(matrixToTry)
row = 4
set.seed(37)
model <- xgb.cv(booster = "gbtree",
objective = "binary:logistic",
gamma = matrixToTry[row, 1],
child_weight = matrixToTry[row, 2],
max_depth = matrixToTry[row, 3],
subsample = matrixToTry[row, 4],
col_subsample = matrixToTry[row, 5],
eta = matrixToTry[row, 6],
nrounds = 10000,
nthreads = 28,
nfold = 5,
print_every_n = 2500,
early_stopping_rounds = 2,
data = xgb_train_data,
eval_metric = "logloss"
)
model$evaluation_log
model$evaluation_log[model$best_iteration]
model$evaluation_log[model$best_iteration[3]]
model$evaluation_log[model$best_iteration]$test_logloss_mean
library(xgboost)
set.seed(37)
# load data
train_data <- read.csv("data/clean/training.csv")
test_data <- read.csv("data/clean/testing.csv")
train_labels <- train_data$Outcome
train_data$Outcome <- NULL
xgb_train_data <- xgb.DMatrix(data.matrix(train_data), label = train_labels)
test_labels <- test_data$Outcome
test_data$Outcome <- NULL
xgb_test_data <- xgb.DMatrix(data.matrix(test_data), label = test_labels)
# a matrix to hold hyperparameter combinations
matrixToTry <- matrix(,nrow=0,ncol=6)
for (gamma in c(0, 0.1, 0.2, 0.3, 0.4))
{
for (child_weight in c(1,2,3,4,5,6))
{
for (col_subsample in c(0.6, 0.7, 0.8, 0.9))
{
for (max_depth in c(6, 7, 8, 9, 10, 11))
{
for (subsample in c(0.6, 0.7, 0.8, 0.9))
{
for (eta in c(0.01, 0.05, 0.08, 0.1))
{
matrixToTry <- rbind(matrixToTry,
c(gamma,child_weight,
max_depth, subsample, col_subsample,
eta))
}
}
}
}
}
}
for (row in 1:nrow(matrixToTry))
{
set.seed(37)
model <- xgb.cv(booster = "gbtree",
objective = "binary:logistic",
gamma = matrixToTry[row, 1],
child_weight = matrixToTry[row, 2],
max_depth = matrixToTry[row, 3],
subsample = matrixToTry[row, 4],
col_subsample = matrixToTry[row, 5],
eta = matrixToTry[row, 6],
nrounds = 10000,
nthreads = 28,
nfold = 5,
print_every_n = 2500,
early_stopping_rounds = 2,
data = xgb_train_data,
eval_metric = "logloss"
)
log_loss <- model$evaluation_log[model$best_iteration]$test_logloss_mean
if(log_loss < best_log_loss)
{
best_xgb_model <- model
best_log_loss <- log_loss
print("NEW BEST MODEL FOUND!")
print("ROW:")
print(row)
}
else
{
print("MODEL DID NOT IMPROVE")
print("ROW:")
print(row)
}
}
best_xgb_model <- NULL
best_log_loss <- 999
for (row in 1:nrow(matrixToTry))
{
set.seed(37)
model <- xgb.cv(booster = "gbtree",
objective = "binary:logistic",
gamma = matrixToTry[row, 1],
child_weight = matrixToTry[row, 2],
max_depth = matrixToTry[row, 3],
subsample = matrixToTry[row, 4],
col_subsample = matrixToTry[row, 5],
eta = matrixToTry[row, 6],
nrounds = 10000,
nthreads = 28,
nfold = 5,
print_every_n = 2500,
early_stopping_rounds = 2,
data = xgb_train_data,
eval_metric = "logloss"
)
log_loss <- model$evaluation_log[model$best_iteration]$test_logloss_mean
if(log_loss < best_log_loss)
{
best_xgb_model <- model
best_log_loss <- log_loss
print("NEW BEST MODEL FOUND!")
print("ROW:")
print(row)
}
else
{
print("MODEL DID NOT IMPROVE")
print("ROW:")
print(row)
}
}
save(best_xgb_model, file = "models/best_xgb_model.RData")
