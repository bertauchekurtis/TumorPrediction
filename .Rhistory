runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
?withSpinner
?req
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
?downloadHandler
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
?req
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?renderTable
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
sampleData <- read.csv("data/testingSet_withVars_DATA_ONE.csv")
sampleData <- read.csv("C:/Users/kurti/PhosphoPep/data/testingSet_withVars_DATA_ONE.csv")
sampleData <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/testingSet_withVars_DATA_ONE.csv")
phosphoData <- which(sampleData$modS > 0 || sampleData$modT > 0 || sampleData$modY > 0)
?which
phosphoData <- sampleData[which(sampleData$modS > 0 || sampleData$modT > 0 || sampleData$modY > 0)]
phosphoData <- sampleData[which(sampleData$modS > 0)]
phosphoData <- sampleData[which(sampleData$modS > 0)]
phosphoData <- sampleData[which(sampleData$modS > 0),]
phosphoData <- sampleData[which(sampleData$modS > 0 || sampleData$modT > 0 || sampleData$modY > 0),]
phosphoData <- sampleData[which(sampleData$modS > 0 | sampleData$modT > 0 | sampleData$modY > 0),]
?write.csv
write.csv(sampleData, file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
write.csv(sampleData, file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv", quote = FALSE, row.names = FALSE)
phosphoData <- read.csv(file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
sampleData <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/testingSet_withVars_DATA_ONE.csv")
phosphoData <- sampleData[which(sampleData$modS > 0 | sampleData$modT > 0 | sampleData$modY > 0),]
write.csv(phosphoData, file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv", quote = FALSE, row.names = FALSE)
phosphoData <- read.csv(file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp()
runApp('C:/Users/kurti/Desktop/PhosphoPep')
slr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Linear Regression (1).csv")
step <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Best Subset Regression.csv")
lasso <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Lasso Regression.csv")
ridge <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Ridge Regression.csv")
elastic <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Elastic Net Regression.csv")
rf <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Random Forest.csv")
xgb <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/XG Boost (1).csv")
svr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Support Vector Regression.csv")
calcStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# RMSE
rmse <- sqrt(mean(residuals ^ 2))
# mae
mae <- mean(abs(residuals))
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
# correlation
corr <- cor(predictedResponse, trueResponse)
# return vector
c(rmse, mae, window, corr)
}
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
step_r <- calcStats(phosphoData$RetentionTime, step$Prediction)
lasso_r <- calcStats(phosphoData$RetentionTime, lasso$Prediction)
ridge_r <- calcStats(phosphoData$RetentionTime, ridge$Prediction)
elastic_r <- calcStats(phosphoData$RetentionTime, elastic$Prediction)
rf_r <- calcStats(phosphoData$RetentionTime, elastic$Prediction)
rf_r <- calcStats(phosphoData$RetentionTime, rf$prediction)
xgb <- calcStats(phosphoData$RetentionTime, xgb$Prediction)
svr <- calcStats(phosphoData$RetentionTime, svr$Prediction)
all_results <- as.data.frame(slr_r)
all_results <- append(all_results, step_r)
all_results <- as.data.frame(slr_r)
all_results <- rbind(all_results, step_r)
all_results <- as.data.frame(slr_r)
View(all_results)
all_data <- data.frame(rmse = numeric(), mae = numeric(), window = numeric(), cor = numeric())
all_data[1,] <- slr_r
all_data[2,] <- step_r
all_data[3,] <- ridge_r
all_data[4,] <- lasso_r
all_data[5,] <- elastic_r
all_data[6,] <- rf_r
all_data[7,] <- xgb
xgb_r <- calcStats(phosphoData$RetentionTime, xgb$Prediction)
phosphoData <- read.csv(file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
slr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Linear Regression (1).csv")
step <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Best Subset Regression.csv")
lasso <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Lasso Regression.csv")
ridge <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Ridge Regression.csv")
elastic <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Elastic Net Regression.csv")
rf <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Random Forest.csv")
xgb <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/XG Boost (1).csv")
svr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Support Vector Regression.csv")
calcStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# RMSE
rmse <- sqrt(mean(residuals ^ 2))
# mae
mae <- mean(abs(residuals))
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
# correlation
corr <- cor(predictedResponse, trueResponse)
# return vector
c(rmse, mae, window, corr)
}
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
step_r <- calcStats(phosphoData$RetentionTime, step$Prediction)
lasso_r <- calcStats(phosphoData$RetentionTime, lasso$Prediction)
ridge_r <- calcStats(phosphoData$RetentionTime, ridge$Prediction)
elastic_r <- calcStats(phosphoData$RetentionTime, elastic$Prediction)
rf_r <- calcStats(phosphoData$RetentionTime, rf$prediction)
xgb_r <- calcStats(phosphoData$RetentionTime, xgb$Prediction)
svr_r <- calcStats(phosphoData$RetentionTime, svr$Prediction)
all_data <- data.frame(rmse = numeric(), mae = numeric(), window = numeric(), cor = numeric())
all_data[1,] <- slr_r
all_data[2,] <- step_r
all_data[3,] <- ridge_r
all_data[4,] <- lasso_r
all_data[5,] <- elastic_r
all_data[6,] <- rf_r
all_data[7,] <- xgb_r
all_data[8,] <- svr_r
phospho_only_results <- all_data
save(phospho_only_results, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
plot(x = phosphoData$RetentionTime, y = xgb$Prediction)
abline()
?abline
plot(x = phosphoData$RetentionTime, y = xgb$Prediction)
abline(b = 1)
phospho_xgb_col$col <- rbPal(200)[as.numeric(cut((phosphoData$RetentionTime - xgb$Prediction),breaks = 200))]
rbPal <- colorRampPalette(c("#70221c", "#1b9e58"))
phospho_xgb_col$col <- rbPal(200)[as.numeric(cut((phosphoData$RetentionTime - xgb$Prediction),breaks = 200))]
rbPal <- colorRampPalette(c("#70221c", "#1b9e58"))
xgb$col <- rbPal(200)[as.numeric(cut((phosphoData$RetentionTime - xgb$Prediction),breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
xgb$col <- rbPal(200)[as.numeric(cut((abs(phosphoData$RetentionTime - xgb$Prediction)),breaks = 200))]
plot(height = sampleResults[,1],names.arg = c("SLR", "Stepwise", "Ridge", "Lasso", "Elastic Net", "RF", "XGB", "SVR"),  horiz = FALSE, main = "Root Mean Square Error on Sample Data", ylab = "RMSE (Minutes)", xlab = "Model", col = sampleResults$Col)
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#1b9e58", "#70221c"))
xgb$col <- rbPal(200)[as.numeric(cut((abs(phosphoData$RetentionTime - xgb$Prediction)),breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#1b9e58", "#70221c"))
xgb$col <- rbPal(200)[as.numeric(cut(((phosphoData$RetentionTime - xgb$Prediction)^2),breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#1b9e58", "#70221c"))
xgb$col <- rbPal(200)[as.numeric(cut(((phosphoData$RetentionTime - xgb$Prediction)^10),breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#1b9e58", "#70221c"))
xgb$col <- rbPal(200)[as.numeric(cut(((phosphoData$RetentionTime - xgb$Prediction)^100),breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
?rstandard
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
?std
?sd
xgb$std_res <- xgb$red / sd(xgb$res)
xgb$std_res <- xgb$res / sd(xgb$res)
xgb$std_res <- abs(xgb$std_res)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$std_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$std_res <- 2 ^ xgb$res
xgb$col <- rbPal(200)[as.numeric(cut(xgb$std_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
xgb$std_res <- sqrt(xgb$res)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$std_res,breaks = 200))]
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$std_res <- sqrt(abs(xgb$res))
xgb$col <- rbPal(200)[as.numeric(cut(xgb$std_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
xgb$std_res <- (abs(xgb$res)) ^ (1/3)
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$std_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#1d1b9e", "#70221c"))
rbPal <- colorRampPalette(c("#1d1b9e", "#70221c"))
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#1d1b9e", "#9e1b1b"))
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#117833", "#9e1b1b"))
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
p <- plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
rbPal <- colorRampPalette(c("#117833", "#d422bf"))
xgb$res <- phosphoData$RetentionTime - xgb$Prediction
xgb$mod_res <- (abs(xgb$res)) ^ (1/3)
xgb$col <- rbPal(200)[as.numeric(cut(xgb$mod_res,breaks = 200))]
plot(x = phosphoData$RetentionTime, y = xgb$Prediction, col = xgb$col)
runApp('C:/Users/kurti/Desktop/PhosphoPep')
load('data/sample/phospho_only_results.RData')
load("data/sample/phospho_only_results.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
row.names(phospho_only_results) <- c("1", "2", "3")
row.names(phospho_only_results) <- c("Simple Linear Regression", "Stepwise Regresion", "Ridge Regression", "Lasso Regression", "Elastic Net Regression", "Random Forest", "XG Boost", "Support Vector Regression")
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
load("data/sample/slr_sample_result.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/slr_sample_result.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/stepwise_sample_result.RData")
sampleResults <- rbind(slr_sample_result, stepwise_sample_result)
View(phospho_only_results)
phospho_only_results <- load("data/sample/phospho_only_results.RData")
phospho_only_results <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
phosphoData <- read.csv(file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
slr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Linear Regression (1).csv")
step <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Best Subset Regression.csv")
lasso <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Lasso Regression.csv")
ridge <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Ridge Regression.csv")
elastic <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Elastic Net Regression.csv")
rf <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Random Forest.csv")
xgb <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/XG Boost (1).csv")
svr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Support Vector Regression.csv")
calcStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# RMSE
rmse <- sqrt(mean(residuals ^ 2))
# mae
mae <- mean(abs(residuals))
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
# correlation
corr <- cor(predictedResponse, trueResponse)
# return vector
c(rmse, mae, window, corr)
}
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
step_r <- calcStats(phosphoData$RetentionTime, step$Prediction)
lasso_r <- calcStats(phosphoData$RetentionTime, lasso$Prediction)
ridge_r <- calcStats(phosphoData$RetentionTime, ridge$Prediction)
elastic_r <- calcStats(phosphoData$RetentionTime, elastic$Prediction)
rf_r <- calcStats(phosphoData$RetentionTime, rf$prediction)
xgb_r <- calcStats(phosphoData$RetentionTime, xgb$Prediction)
svr_r <- calcStats(phosphoData$RetentionTime, svr$Prediction)
all_data <- data.frame(rmse = numeric(), mae = numeric(), window = numeric(), cor = numeric())
all_data[1,] <- slr_r
all_data[2,] <- step_r
all_data[3,] <- ridge_r
all_data[4,] <- lasso_r
all_data[5,] <- elastic_r
all_data[6,] <- rf_r
all_data[7,] <- xgb_r
all_data[8,] <- svr_r
phospho_only_results <- all_data
View(phospho_only_results)
colnames(phospho_only_results) <- c("Root Mean Square Error (minutes)", "Mean Absolute Error (minutes)", "95% Error Window Size (minutes)", "Correlation (minutes)")
row.names(phospho_only_results) <- c("Simple Linear Regression", "Stepwise Regresion", "Ridge Regression", "Lasso Regression", "Elastic Net Regression", "Random Forest", "XG Boost", "Support Vector Regression")
save(phospho_only_results, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
phospho_only_results <- load("data/sample/phospho_only_results.RData")
phospho_only_results <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
phospho_only_results <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/phospho_only_results.RData")
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
phosphoData <- read.csv(file = "C:/Users/kurti/Desktop/PhosphoPep/data/test_phos_only.csv")
slr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Linear Regression (1).csv")
step <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Best Subset Regression.csv")
lasso <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Lasso Regression.csv")
ridge <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Ridge Regression.csv")
elastic <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Elastic Net Regression.csv")
rf <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Random Forest.csv")
xgb <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/XG Boost (1).csv")
svr <- read.csv(file = "C:/Users/kurti/Downloads/phosphoOnly/Support Vector Regression.csv")
calcStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# RMSE
rmse <- sqrt(mean(residuals ^ 2))
# mae
mae <- mean(abs(residuals))
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
# correlation
corr <- cor(predictedResponse, trueResponse)
# return vector
c(rmse, mae, window, corr)
}
slr_r <- calcStats(phosphoData$RetentionTime, slr$Prediction)
step_r <- calcStats(phosphoData$RetentionTime, step$Prediction)
lasso_r <- calcStats(phosphoData$RetentionTime, lasso$Prediction)
ridge_r <- calcStats(phosphoData$RetentionTime, ridge$Prediction)
elastic_r <- calcStats(phosphoData$RetentionTime, elastic$Prediction)
rf_r <- calcStats(phosphoData$RetentionTime, rf$prediction)
xgb_r <- calcStats(phosphoData$RetentionTime, xgb$Prediction)
svr_r <- calcStats(phosphoData$RetentionTime, svr$Prediction)
save(slr_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/slr_r_p.RData")
save(step_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/step_r_p.RData")
save(lasso_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/lasso_r_p.RData")
save(ridge_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/ridge_r_p.RData")
save(elastic_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/elastic_r_p.RData")
save(rf_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/rf_r_p.RData")
save(xgb_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/xgb_r_p.RData")
save(svr_r, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/svr_r_p.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/slr_r_p.RData")
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
xgb_results <- read.csv("data/sample/XG Boost Results.csv")
xgb_results <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/sample/XG Boost Results.csv")
rbPal <- colorRampPalette(c("#117833", "#d422bf"))
xgb_results$res <- sampleData$RetentionTime - xgb_results$Prediction
sampleData <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/testingSet_withVars_DATA_ONE.csv")
xgb_results$res <- sampleData$RetentionTime - xgb_results$Prediction
xgb_results$mod_res <- (abs(xgb_results$res)) ^ (1/3)
xgb_results$col <- rbPal(200)[as.numeric(cut(xgb_results$mod_res,breaks = 200))]
plot(x = sampleData$RetentionTime, y = xgb_results$Prediction, col = xgb_results$col)
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?renderPlot
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
View(xgb_results)
View(xgb_results)
View(xgb_results)
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?plot
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?barplot
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?abline
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?lines
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
?bsToolTip
?bsTooltip
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
sampleData <- read.csv("C:/Users/kurti/Desktop/PhosphoPep/data/testingSet_withVars_DATA_ONE.csv")
slr <- read.csv("C:/Users/kurti/Downloads/full/Linear Regression.csv")
slr <- read.csv("C:/Users/kurti/Downloads/full/Linear Regression.csv")
step <- read.csv("C:/Users/kurti/Downloads/full/Best Subset Regression.csv")
ridge <- read.csv("C:/Users/kurti/Downloads/full/Ridge Regression.csv")
lasso <- read.csv("C:/Users/kurti/Downloads/full/Lasso Regression.csv")
elastic <- read.csv("C:/Users/kurti/Downloads/full/Elastic Net Regression.csv")
rf <- read.csv("C:/Users/kurti/Downloads/full/Random Forest.csv")
xgb <- read.csv("C:/Users/kurti/Downloads/full/XG Boost (1).csv")
svr <- read.csv("C:/Users/kurti/Downloads/full/Support Vector Regression.csv")
calcWinStats = function(trueResponse, predictedResponse)
{
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
c(window, q[1], q[2], mean(residuals))
}
calcWinStats = function(trueResponse, predictedResponse)
{
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
c(window, q[1], q[2], mean(residuals))
}
slr_w <- calcStats(phosphoData$RetentionTime, slr$Prediction)
slr_w <- calcWinStats(phosphoData$RetentionTime, slr$Prediction)
calcWinStats = function(trueResponse, predictedResponse)
{
residuals <- trueResponse - predictedResponse
# window
q <- quantile(residuals, probs =c(.025,.975))
window <- abs(q[1]) + abs(q[2])
c(window, q[1], q[2], mean(residuals))
}
slr_w <- calcWinStats(phosphoData$RetentionTime, slr$Prediction)
slr_w <- calcWinStats(sampleData$RetentionTime, slr$Prediction)
step_w <- calcWinStats(sampleData$RetentionTime, step$Prediction)
lasso_w <- calcWinStats(sampleData$RetentionTime, lasso$Prediction)
ridge_w <- calcWinStats(sampleData$RetentionTime, ridge$Prediction)
elastic_w <- calcWinStats(sampleData$RetentionTime, elastic$Prediction)
rf_w <- calcWinStats(sampleData$RetentionTime, rf$prediction)
rf_w <- calcWinStats(sampleData$RetentionTime, rf$prediction)
xgb_w <- calcWinStats(sampleData$RetentionTime, xgb$Prediction)
svr_w <- calcWinStats(sampleData$RetentionTime, svr$Prediction)
rf_w <- calcWinStats(sampleData$RetentionTime, rf$Prediction)
save(slr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
save(step_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/step_w.RData")
save(lasso_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/lasso_w.RData")
save(ridge_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/ridge_w.RData")
save(slr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
save(step_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/step_w.RData")
save(lasso_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/lasso_w.RData")
save(ridge_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/ridge_w.RData")
save(elastic_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/elastic_w.RData")
save(rf_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/rf_w.RData")
save(xgb_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/xgb_w.RData")
save(svr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/svr_w.RData")
install.packages("plotrix")
?runif
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
slr_w <- load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
slr_w <- calcWinStats(sampleData$RetentionTime, slr$Prediction)
save(slr_w, file = "C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
runApp('C:/Users/kurti/Desktop/PhosphoPep')
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/slr_w.RData")
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/window/step_w.RData")
windowResults <- rbind(slr_w, step_w)
windowResults <- rbind(windowResults, ridge_w)
windowResults <- rbind(windowResults, lasso_w)
windowResults <- rbind(windowResults, elastic_w)
windowResults <- rbind(windowResults, rf_w)
windowResults <- rbind(windowResults, xgb_w)
windowResults <- rbind(windowResults, svr_w)
View(windowResults)
colnames(windowResults) <- c("size", "low", "high", "mean")
windowResults$size
windowResults[,1]
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?plotCI
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
?abline
runApp('C:/Users/kurti/Desktop/PhosphoPep')
runApp('C:/Users/kurti/Desktop/PhosphoPep')
shiny::runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
load("C:/Users/kurti/Desktop/PhosphoPep/data/sample/XG Boost Results.csv")
load("C:/Users/kurti/Desktop/PhosphoPep - Copy/data/sample/XG Boost Results.csv")
runApp('C:/Users/kurti/Desktop/PhosphoPep - Copy')
data <- read.csv("data/raw/ccRCC_DIA_protein.tsv", sep = "\t")
setwd("C:/Users/kurti/Desktop/TumorPrediction")
data <- read.csv("data/raw/ccRCC_DIA_protein.tsv", sep = "\t")
# remove peptide sequences and num peptides (not necessary for this task)
data$NumPeptides <- NULL
data$PeptideSequences <- NULL
# replace with easier to read labels
colnames(data)[endsWith(colnames(data), "_NAT.mzML")]<-"NAT"
colnames(data)[endsWith(colnames(data), "_T.mzML")]<-"T"
# need to add these to top so they are not lost in transposition
data <- rbind(colnames(data), data)
# flip rows and columns
data <- t(data)
# turn into data frame
data <- as.data.frame(data, row.names = 1:nrow(data))
# correct column names
colnames(data) <- data[1,]
data <- read.csv("data/raw/ccRCC_DIA_protein.tsv", sep = "\t")
# remove peptide sequences and num peptides (not necessary for this task)
data$NumPeptides <- NULL
data$PeptideSequences <- NULL
# replace with easier to read labels
colnames(data)[endsWith(colnames(data), "_NAT.mzML")]<-"NAT"
colnames(data)[endsWith(colnames(data), "_T.mzML")]<-"T"
# need to add these to top so they are not lost in transposition
data <- rbind(colnames(data), data)
# flip rows and columns
data <- t(data)
# turn into data frame
data <- as.data.frame(data, row.names = 1:nrow(data))
# correct column names
colnames(data) <- data[1,]
colnames(data)[1] <- "Outcome"
# remove extra names that were saved during transposition process
data <- data[-1,]
# write to file
write.csv(data, file = "data/clean/processed.tsv", quote = FALSE, row.names = FALSE)
